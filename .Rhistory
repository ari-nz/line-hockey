#Create game board Plot
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
#Create set of plotable points
GamePoints = data.frame(
"rows" = rep(1:size[2], size[1]),
"cols" = rep(1:size[1], each = size[2]),
"uID"  = 1:(size[1]*size[2])
)
#Add points to graph
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
#Create Game Board Matrix
GameBoard <- t(matrix(data = 0, nrow = size[1], ncol = size[2]))
## Add these in if you need an extra line at the top and bottom of the bame board
#GameBoard <- matrix(data = 0, nrow = size[1]+2, ncol = size[2])
#GameBoard[c(1,size[1]+2),] = NA
#GameBoard[c(1,size[1]+2),ceiling(size[2]/2)] = 0
#Initialise matrix of possible moves
MoveMatrix = .InitialiseMoveMatrix(GamePoints)
#Randomise Starting player
Turn = sample(c(1,2),1)
#Wrap the Initialisation up in the game state
GameState = list("GameBoard" = GameBoard, "GamePoints" = GamePoints, "MoveMatrix" = MoveMatrix, "Turn" = Turn)
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% 5,(i-1) %/% 5 + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% 5,(i-1) %/% 5 + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
i=57
1 + (i-1) %% 5
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% 5,(i-1) %/% 5 + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
.InitialiseMaxGameBoard(GameState)<-function(GameState){
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
return(MaxGameBoard)
}
.InitialiseMaxGameBoard(GameState) <- function(GameState){
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
return(MaxGameBoard)
}
.InitialiseMaxGameBoard(GameState) <- function(GameState){
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
return(MaxGameBoard)
}
.InitialiseMaxGameBoard <- function(GameState){
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
return(MaxGameBoard)
}
GameState$MaxGameBoard = .InitialiseMaxGameBoard(GameState)
GameState
MaxGameBoard = GameState$GameBoard
MaxGameBoard
n_nodes
1 + (1:63-1) %% size[1],(1:63-1) %/% size[2] + 1
1 + (1:63-1) %% size[1]
(1:63-1) %/% size[2] + 1
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
MaxGameBoard
GameState$MoveMatrix
for (i in 1:n_nodes) {
print(paste(1 + (i-1) %% size[1],(i-1) %/% size[2] + 1, length(which(GameState$MoveMatrix[i,]==0))))
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
for (i in 1:n_nodes) {
print(paste(1 + (i-1) %% size[2],(i-1) %/% size[2] + 1, length(which(GameState$MoveMatrix[i,]==0))))
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
for (i in 1:n_nodes) {
print(paste(1 + (i-1) %% size[2],(i-1) %/% size[1] + 1, length(which(GameState$MoveMatrix[i,]==0))))
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
for (i in 1:n_nodes) {
print(paste(1 + (i-1) %% size[1],(i-1) %/% size[1] + 1, length(which(GameState$MoveMatrix[i,]==0))))
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[2] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
for (i in 1:n_nodes) {
print(paste(1 + (i-1) %% size[1],(i-1) %/% size[1] + 1, length(which(GameState$MoveMatrix[i,]==0))))
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
MaxGameBoard
.InitialiseMaxGameBoard <- function(GameState){
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
return(MaxGameBoard)
}
.InitialiseMoveMatrix<-function(GamePoints){
# Create a matrix which stores which links between points have been done.
#   NA - Impossible move
#   0  - Available Move
#   1  - User made move
#   -1 - Going from to location
n.uniquePoints = dim.data.frame(GamePoints)[1]
x.max = max(GamePoints$cols)
y.max = max(GamePoints$rows)
MoveMatrix =  matrix(data = NA, nrow = n.uniquePoints, ncol = n.uniquePoints)
for (i in 1:n.uniquePoints){
checkPoint = GamePoints[i,]
x.loc = checkPoint$cols
y.loc = checkPoint$rows
#make sure that the available moves at a given point are within the bounds and are only for adjacent moves
for (j in (x.loc-1):(x.loc+1)){
# if the adjacent positions are not outside the bounds
if( j > 0 & j <= x.max){
for (k in (y.loc-1):(y.loc+1)){
if( k > 0 & k <= y.max){
#browser()
node_searched = intersect(which(GamePoints$col == j), which(GamePoints$row == k))
#print(paste("Current Node = ", i, "\nj and k are, ",j,k, "\nFound node, ", node_searched))
MoveMatrix[i,node_searched] = 0
}
}
}
}
}
diag(MoveMatrix) = -1
return(MoveMatrix)
}
if(length(size) == 1){
size = c(size, size)
}
## TODO - Assert the size is odd
#Create game board Plot
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
#Create set of plotable points
GamePoints = data.frame(
"rows" = rep(1:size[2], size[1]),
"cols" = rep(1:size[1], each = size[2]),
"uID"  = 1:(size[1]*size[2])
)
#Add points to graph
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
#Create Game Board Matrix
GameBoard <- t(matrix(data = 0, nrow = size[1], ncol = size[2]))
## Add these in if you need an extra line at the top and bottom of the bame board
#GameBoard <- matrix(data = 0, nrow = size[1]+2, ncol = size[2])
#GameBoard[c(1,size[1]+2),] = NA
#GameBoard[c(1,size[1]+2),ceiling(size[2]/2)] = 0
#Initialise matrix of possible moves
MoveMatrix = .InitialiseMoveMatrix(GamePoints)
#Randomise Starting player
Turn = sample(c(1,2),1)
#Wrap the Initialisation up in the game state
GameState = list("GameBoard" = GameBoard, "GamePoints" = GamePoints, "MoveMatrix" = MoveMatrix, "Turn" = Turn)
#Holds the number of moves through a points required to draw on that point, ie 2 in the corners causeon the second time into that point
GameState$MaxGameBoard = .InitialiseMaxGameBoard(GameState)
size
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
size = c(5,7)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
#Create set of plotable points
GamePoints = data.frame(
"rows" = rep(1:size[2], size[1]),
"cols" = rep(1:size[1], each = size[2]),
"uID"  = 1:(size[1]*size[2])
)
#Add points to graph
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
GamePoints
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
#Create game board Plot
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
#Create set of plotable points
GamePoints = data.frame(
"rows" = rep(1:size[2], size[1]),
"cols" = rep(1:size[1], each = size[2]),
"uID"  = 1:(size[1]*size[2])
)
#Add points to graph
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
#Create Game Board Matrix
GameBoard <- t(matrix(data = 0, nrow = size[1], ncol = size[2]))
## Add these in if you need an extra line at the top and bottom of the bame board
#GameBoard <- matrix(data = 0, nrow = size[1]+2, ncol = size[2])
#GameBoard[c(1,size[1]+2),] = NA
#GameBoard[c(1,size[1]+2),ceiling(size[2]/2)] = 0
#Initialise matrix of possible moves
MoveMatrix = .InitialiseMoveMatrix(GamePoints)
#Randomise Starting player
Turn = sample(c(1,2),1)
#Wrap the Initialisation up in the game state
GameState = list("GameBoard" = GameBoard, "GamePoints" = GamePoints, "MoveMatrix" = MoveMatrix, "Turn" = Turn)
GameState$GameBoard
GameState$MaxGameBoard
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
MakeMove(7, 8, GameState)
size = dim(GameState$GameBoard)
GameState$GamePoints
ContinueTurn<-function(GameState, to_node){
#Checks to see if the player should have another movement by bouncing on a node.
node_coords = GameState$GamePoints[c(1,2), to_node]
is.vistied = GameState$GameBoard[node_coords[1],node_coords[1]]
if (is.vistied > 0){
continue = TRUE
} else {
continue = FALSE
}
}
?menu
?setdiff
setdiff(GameState$Turn,c(1,2))
GameState$Turn
setequal(GameState$Turn,c(1,2))
setdiff(GameState$Turn,c(1,2))
GameState$Turn %in% c(1,2)
2%% 1
2%% 2
2%/% 2
2%/% 1
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
node_coords[1]
GameState$GamePoints[c(1,2), to_node]
to_node
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/testrun.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/testrun.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$GameBoard
node_coords[1]
node_coords[1]
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
MaxGameBoard
ceiling(MaxGameBoard/2)
which(MaxGameBoard%%2 == 0)
MaxGameBoard = MaxGameBoard[which(MaxGameBoard%%2 == 0)] = 0
MaxGameBoard
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
MaxGameBoard[which(MaxGameBoard%%2 == 0)] = 0
MaxGameBoard
MaxGameBoard[which(MaxGameBoard%%2 == 0)] = 0size
GameState$GameBoard
size = dim(GameState$GameBoard)
middle_node = (size[1] *size[2] + 1)/2
n_nodes = size[1] * size[2]
MaxGameBoard = GameState$GameBoard
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]==0))
}
for (i in 1:n_nodes) {
MaxGameBoard[1 + (i-1) %% size[1],(i-1) %/% size[1] + 1] = length(which(GameState$MoveMatrix[i,]>=0))
}
MaxGameBoard
MaxGameBoard[middle_node]=MaxGameBoard[middle_node]+1
MaxGameBoard[which(MaxGameBoard%%2 == 0)] = 0
MaxGameBoard = ceiling(MaxGameBoard/2)
MaxGameBoard
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/Board/CreateGameBoard.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$GameBoard
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/./Game/ContinueTurn.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
node_coords
to_node
GameState$GamePoints[to_node, c(1,2)]
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
Q
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
rep(ceiling(size[1]/2),2)
c(0,size[2]+1)
points(labels =c("Player 1 Come Here," "Player 2 Come Here"), rep(ceiling(size[1]/2),2), c(-0.5,size[2]+1.5), col = c('blue','red'), cex = 1.5)
points(labels =c("Player 1 Come Here", "Player 2 Come Here"), rep(ceiling(size[1]/2),2), c(-0.5,size[2]+1.5), col = c('blue','red'), cex = 1.5)
text(labels =c("Player 1 Come Here", "Player 2 Come Here"), rep(ceiling(size[1]/2),2), c(-0.5,size[2]+1.5), col = c('blue','red'), cex = 1.5)
?text
text(labels =c("Player 1 Come Here", "Player 2 Come Here"), x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5), col = c('blue','red'), cex = 1.5)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
text(labels =c("Player 1 Come Here", "Player 2 Come Here"), x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5), col = c('blue','red'), cex = 1.5)
GameBoard <- t(matrix(data = 0, nrow = size[1], ncol = size[2]))
?text
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
plot(0,0,xlim = c(-10,10), ylim = c(-10, 10))
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
plot(0,0, type = 'n', xlim = c(0,size[1]+1), ylim = c(-0.5, size[2]+1.5), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(0, size[2]+1), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(-0.5, size[2]+1.5), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(-0.5, size[2]+1.5), asp = 1 )
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(-0.5, size[2]+1.5))
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
size[2]
points(rep(ceiling(size[1]/2),2), c(0,size[2]+2), pch = 21, bg = c('blue','red'), cex = 1.5)
plot(0,0, type = 'n', xlim = c(0.5,size[1]+0.5), ylim = c(-0.5, size[2]+2), xann = NULL, yann = NULL, axes = FALSE, xlab = "", ylab = "", asp = 1 )
#Create set of plotable points
GamePoints = data.frame(
"rows" = rep(1:size[2], size[1]),
"cols" = rep(1:size[1], each = size[2]),
"uID"  = 1:(size[1]*size[2])
)
#Add points to graph
points(GamePoints$cols,GamePoints$rows, pch = 16)
text(GamePoints$cols+0.15,GamePoints$rows+0.1, labels = paste0(GamePoints$cols,", ",GamePoints$rows), cex = 0.8)
text(GamePoints$cols-0.15,GamePoints$rows-0.1, labels = GamePoints$uID, col = 'red', cex = 0.8)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+2), pch = 21, bg = c('blue','red'), cex = 1.5)
points(rep(ceiling(size[1]/2),2), c(0,size[2]+1), pch = 21, bg = c('blue','red'), cex = 1.5)
text(x=rep(ceiling(size[1]/2),2), y=c(-0.5,size[2]+1.5),labels =c("Player 1 Come Here", "Player 2 Come Here"), col = c('blue','red'), cex = 1.5)
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/run.r')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$MaxGameBoard
selected_node
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
selected_node
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
MakeMove(current_node, selected_node, GameState)
continue_move
selected_node
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$GamePoints
selected_node
GameState$GamePoints[selected_node,c(1,2)]
rowcol = GameState$GamePoints[selected_node,c(1,2)]
rowcol[1]
6-rowcol[1]
6-rowcol[[1]]
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
selected_node_max_moves
selected_node_current_moves
GameState$Turn
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
print(cat(paste0("Player ", GameState$Turn, " has lost\n", "Player ", 2 %/% GameState$Turn, " is the winner")))
cat(paste0("Player ", GameState$Turn, " has lost\n", "Player ", 2 %/% GameState$Turn, " is the winner"))
cat(paste0("Player ", GameState$Turn, " has lost\n", "Player ", 2 %/% GameState$Turn, " is the winner"))
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/Game/GetAvailableMoves.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
head(AllMoves)
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/Board/CreateGameBoard.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
middle_node
Q
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/./Board/CreateGameBoard.R')
.InitialiseMoveMatrix(GamePoints)
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
View(MoveMatrix)
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$MaxGameBoard
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$MaxGameBoard
GameState$GameBoard
size[2]-rowcol[[1]]
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/Game/GetAvailableMoves.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
dim(GameState$MaxGameBoard)
rev(dim(GameState$MaxGameBoard))
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GetAvailableMoves<-function(current_node, GameState){
dim(GameState$GameBoard)
dim(GameState$GameBoard)
seq(size[1],size[1]*size[2],size[1])
size = dim(GameState$GameBoard)
seq(size[1],size[1]*size[2],size[1])
winningnodes = seq(size[1],size[1]*size[2],size[1])
winningnodes
winningnodes
middle
middle = ceiling(size[2]/2)
middle
middle = ceiling(size[2]/2)
winningnodes2 = seq(size[1],size[1]*size[2],size[1])
winningnodes2
winningnodes2 = seq(size[1],size[1]*size[2],size[1]) + 1 - size[1]
winningnodes1 = seq(size[1],size[1]*size[2],size[1]) + 1 - size[1]
winningnodes1
winningnodes2 = seq(size[1],size[1]*size[2],size[1])
winningnodes2 = winningnodes2[(middle-1):(middle+1)]
winningnodes2
winningnodes1
winningnodes1 = winningnodes1[(middle-1):(middle+1)]
winningnodes2 = winningnodes2[(middle-1):(middle+1)]
winningnodes1
winningnodes2
size = dim(GameState$GameBoard)
middle = ceiling(size[2]/2)
winningnodes1 = seq(size[1],size[1]*size[2],size[1]) + 1 - size[1]
winningnodes2 = seq(size[1],size[1]*size[2],size[1])
winningnodes1 = winningnodes1[(middle-1):(middle+1)]
winningnodes2 = winningnodes2[(middle-1):(middle+1)]
winningnodes2
winningnodes1
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GamePoints
middle_node
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
GameState$GamePoints
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/./Game/ContinueTurn.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
View(to_info)
View(GamePoints)
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
source('C:/Users/Ari/Desktop/Line Hockey/Line Hockey/play.R')
